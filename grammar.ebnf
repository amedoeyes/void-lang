top_level = { decl_stmt } ;


statement = ( decl_stmt | if_stmt | return_stmt | expression ), ";" ;

decl_stmt = variable_decl_stmt ;

return_stmt = "return", [ expression ] ;

variable_decl_stmt = "let", identifier, [ ":", type ], "=", expression ;

if_stmt = "if", expression, statement, [ "else", statement ] ;


expression = assignment_expr ;

assignment_expr = ternary_expr, { assignment_op, ternary_expr } ;

ternary_expr = logical_or_expr, [ "?", expression, ":", ternary_expr ] ;

logical_or_expr = logical_and_expr, { logical_or_op, logical_and_expr } ;

logical_and_expr = bitwise_or_expr, { logical_and_op, bitwise_or_expr } ;

bitwise_or_expr = bitwise_xor_expr, { bitwise_or_op, bitwise_xor_expr } ;

bitwise_xor_expr = bitwise_and_expr, { bitwise_xor_op, bitwise_and_expr } ;

bitwise_and_expr = equality_expr, { bitwise_and_op, equality_expr } ;

equality_expr = comparison_expr, { equality_op, comparison_expr } ;

comparison_expr = shift_expr, { comparison_op, shift_expr } ;

shift_expr = term_expr, { shift_op, term_expr } ;

term_expr = factor_expr, { term_op, factor_expr } ;

factor_expr = unary_expr, { factor_op, unary_expr } ;

unary_expr = unary_op, unary_expr | postfix_expr ;

postfix_expr = primary_expr, { call_op }, [ postfix_op ] ;

primary_expr = block_expr | function_expr | identifier | literal | "(", expression, ")" ;

block_expr = "{", { statement }, "}" ;

function_expr = "(", [ parameter_list ], ")", "->", expression ;

assignment_op = "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
logical_or_op = "||" ;
logical_and_op = "&&" ;
bitwise_or_op = "|" ;
bitwise_xor_op = "^" ;
bitwise_and_op = "&" ;
equality_op = "==" | "!=" ;
comparison_op = "<" | ">" | "<=" | ">=" ;
shift_op = "<<" | ">>" ;
term_op = "+" | "-" ;
factor_op = "*" | "/" | "%" ;
unary_op = "!" | "-" | "~" ;
postfix_op = "++" | "--" ;
call_op = "(", [ argument_list ], ")" ;

parameter_list = identifier, { ",", identifier } ;
argument_list = expression, { ",", expression } ;


type = builtin_type | identifier_type | function_type ;

identifier_type = identifier ;

function_type = "(", [ paramater_type_list ], ")", "->", type ;
paramater_type_list = type, { ",", type } ;

builtin_type = "bool" | "i8" | "i16" | "i32" | "i64" | "f32" | "f64" | "void" ;

literal = boolean | number ;

bool = "true" | "false" ;

identifier = letter, { letter | digit | "_" } ;

letter = lower_letter | upper_letter ;

lower_letter = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;

upper_letter = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;

number = integer | float ;

float = integer, '.', integer ;

integer	= digit, { digit } ;

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
